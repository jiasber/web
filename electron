一开始将原有项目整成桌面平台用的node-webkit 其中想要实现登录记住多个用户账户和密码,node-webkit并不能清除缓存找来找去也没整出所以然,便使用electron
接下来所有东西都使用淘宝镜像

根据开发文档快速入门
构建一个main.js文件
//main.js start-------------------------------------------------------------------------------------
const {app, BrowserWindow} = require('electron')
const path = require('path')
const url = require('url')

// 保持一个对于 window 对象的全局引用，如果你不这样做，
// 当 JavaScript 对象被垃圾回收， window 会被自动地关闭
let win

function createWindow () {
  // 创建浏览器窗口。
  win = new BrowserWindow({width: 800, height: 600})

  // 然后加载应用的 index.html。
  win.loadURL(url.format({
    pathname: path.join(__dirname, 'index.html'),//path.join(url)可以直接访问网络路径
    protocol: 'file:',
    slashes: true
  }))

  // 打开开发者工具。
  win.webContents.openDevTools()

  // 当 window 被关闭，这个事件会被触发。
  win.on('closed', () => {
    // 取消引用 window 对象，如果你的应用支持多窗口的话，
    // 通常会把多个 window 对象存放在一个数组里面，
    // 与此同时，你应该删除相应的元素。
    win = null
  })
}

// Electron 会在初始化后并准备
// 创建浏览器窗口时，调用这个函数。
// 部分 API 在 ready 事件触发后才能使用。
app.on('ready', createWindow)

// 当全部窗口关闭时退出。
app.on('window-all-closed', () => {
  // 在 macOS 上，除非用户用 Cmd + Q 确定地退出，
  // 否则绝大部分应用及其菜单栏会保持激活。
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

app.on('activate', () => {
  // 在macOS上，当单击dock图标并且没有其他窗口打开时，
  // 通常在应用程序中重新创建一个窗口。
  if (win === null) {
    createWindow()
  }
})
//main.js end-------------------------------------------------------------------------------------
//package.json start------------------------------------------------------------------------------
{
  "dependencies": {
    "electron": "^1.7.11",
    "electron-packager": "^10.1.2",//必须安装
    "electron-prebuilt": "^1.4.13"//必须安装
  },
  "name": "etom",
  "version": "1.0.0",
  "main": "main.js",
  "devDependencies": {},
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "packager": "electron-packager ./ main --all --out ./OutApp --version 1.4.13 --overwrite "
    //1.4.13是electron版本号使用 electron -v 或者 在未打包的文件中cmd electron 可以看到版本号 @./ 表示当前页 @./OutApp 打包出来的文件名 
    @main 运行的exe文件名
  },
  "author": "",
  "license": "ISC",
  "description": ""
}
使用淘宝镜像安装所有模块 npm install -g cnpm --registry=https://registry.npm.taobao.org @使用淘宝镜像cnpm代替npm@
cnpm install electron --save 
cnpm install electron-packager --save
cnpm install electron-prebuilt --save 
安装完后修改配置文件即package.json 运行命令 cnpm run-script packager完成打包 会打包出4份文件夹
